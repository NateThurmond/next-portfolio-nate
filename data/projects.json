[
  {
    "name": "SuperShop",
    "description": "Simple shopping list application built with React-native",
    "url": "https://github.com/NateThurmond/SuperShop",
    "stars": 0,
    "forks": 1,
    "language": "JavaScript",
    "languages": {
      "JavaScript": 54.05,
      "TypeScript": 13.62,
      "Kotlin": 11.48,
      "Objective-C": 10.47,
      "Ruby": 6.71,
      "Objective-C++": 3.66
    },
    "defaultBranch": "master",
    "readme": "# SuperShop (RN)\n\nPoint of Service React-Native app to allow additions to online shopping cart\n\n## Description\n\nI have made React-Native projects before as hybrid apps but I wanted to test what a full client implementation might look like\n\n## Demo: User Flow\n\n<img src=\"assets/vids/demoUse.min.gif\" width=\"300\" />\n\n## Prerequisites\n\nMake sure you have completed the [React Native - Environment Setup](https://reactnative.dev/docs/environment-setup) before proceeding. This will ensure you have the necessary tools to run React Native apps on your system, such as Node.js, Watchman, Android Studio (for Android development), and Xcode (for iOS development).\n\n## Dependencies\n\n- **Node.js** (>= 14.0.0)\n- **Yarn** (optional)\n- **React Native CLI** (via `npm` or `yarn`)\n- **Android Studio** (for Android development)\n- **Xcode** (for iOS development, macOS only)\n\n## Installing\n\n1. Clone this repository:\n\n   ```\n   git clone https://github.com/NateThurmond/SuperShop.git\n   cd SuperShop\n   ```\n\n2. Install the dependencies:\n\n    If youâre using npm:\n\n    ```\n    npm install\n    ```\n\n    Or if youâre using Yarn:\n\n    ```\n    yarn install\n    ```\n\n3. Install the required CocoaPods dependencies (for iOS):\n\n    If you're targeting iOS:\n\n    ```\n    cd ios\n    pod install\n    cd ..\n    ```\n## Running the App\n\n### For iOS\nStart the Metro bundle\n\n    npx react-native start # or yarn\n\n### For Android:\nStart the Metro bundler (if not already running):\n\n    npx react-native start # or yarn\n\nMake sure that Android Studio and an Android Emulator are properly set up.\n\n## Authors\n\n[@NateThurmond](https://github.com/NateThurmond)\n\n## Version History\n\n-   0.2\n    -   Update to latest react-native version and updated Readme\n    -   See [commit change]() or See [release history]()\n-   0.1\n    -   Initial Release\n\n## License\n\nThis project is licensed under the Apache License, Version 2.0\n\n## Acknowledgments\n\nInspiration, code snippets, etc.\n\n-   [React Native](https://github.com/facebook/react-native)\n-   [Material UI](https://github.com/mui/material-ui)\n",
    "repoDemoGifRelative": "assets/vids/demoUse.min.gif",
    "repoDemoGifAbsolute": "https://raw.githubusercontent.com/NateThurmond/SuperShop/master/assets/vids/demoUse.min.gif"
  },
  {
    "name": "MechDesign",
    "description": "This project is a site developed in Node JS to allow players of the board game \"BattleTech\" to customize and design their mechs. It is a work in progress.",
    "url": "https://github.com/NateThurmond/MechDesign",
    "stars": 0,
    "forks": 0,
    "language": "JavaScript",
    "languages": {
      "JavaScript": 80.4,
      "Sass": 11.5,
      "Pug": 7.95,
      "Dockerfile": 0.15
    },
    "defaultBranch": "master",
    "readme": "# MechDesign\n\nThis project is a site developed in Node JS to allow players of the board game \"BattleTech\" to customize and design their mechs. Utilizes Express Routing, MongoDB, Pug, and SASS styling as an alternative to more traditional LAMP stacks\n\n# Overview\n\nThe first site was handled in php and javascript and worked well enough but I would like this site to have improved functionality and also explore different options using MongoDB and Node JS.\n\n### Getting Started\n\n<img src=\"public/vids/demoUse.min.gif\" width=\"450\" />\n\n### Dependencies\n\n-   Docker Desktop\n\n### Installing\n\n-   cp .env.example .env (modify as needed)\n-   docker compose down -v\n-   docker compose build --no-cache\n-   docker compose up -d\n\n### Executing program\n\n-   Navigate to your local browser\n-   Step-by-step guide below\n\n```\nNavigate to http://localhost:3000/\n\nSave once you customized your mech\n```\n\n## Authors\n\n[@NateThurmond](https://github.com/NateThurmond)\n\n## Version History\n\n-   0.4\n    -   Add full mongodb integration on backend\n-   0.3\n    -   Final buildout includes all routes and scripts needed for future dev.\n    -   Includes init DB scripts so anyone can spin up application\n-   0.2\n    -   Switch over to .pug templating from .jade\n    -   See [commit change]() or See [release history]()\n-   0.1\n    -   Initial Development\n\n## License\n\nThis project is licensed under the Apache License, Version 2.0\n\n## Acknowledgments\n\nInspiration, code snippets, etc.\n\n-   [Camo Specs](https://camospecs.com/)\n-   [Solaris Skunk Werks](https://solarisskunkwerks.com/)\n-   [BattleTech](https://www.battletech.com/)\n",
    "repoDemoGifRelative": "public/vids/demoUse.min.gif",
    "repoDemoGifAbsolute": "https://raw.githubusercontent.com/NateThurmond/MechDesign/master/public/vids/demoUse.min.gif"
  },
  {
    "name": "MechDesign-php",
    "description": "MechDesign site developed with php and javascript",
    "url": "https://github.com/NateThurmond/MechDesign-php",
    "stars": 0,
    "forks": 0,
    "language": "PHP",
    "languages": {
      "PHP": 46.87,
      "JavaScript": 37.18,
      "CSS": 14.78,
      "Hack": 0.7,
      "Dockerfile": 0.47
    },
    "defaultBranch": "master",
    "readme": "# MechDesign (PHP)\n\nAllows custom editing of your Battlemechs for the boardgame BattleTech\n\n## Description\n\nPassionate about the BattleTech Boardgame, I endeavored to make a web based application allowing customization of Battlemechs while also simultaneously showcasing my skills.\n\n## Getting Started\n\n<img src=\"vids/demoUse.min.gif\" width=\"450\" />\n\n### Dependencies\n\n-   Docker Desktop\n\n### Installing\n\n-   cp .env.example .env (modify as needed)\n-   docker compose down -v\n-   docker compose build --no-cache\n-   docker compose up -d\n\n### Executing program\n\n-   Navigate to your local browser\n-   Step-by-step guide below\n\n```\nNavigate to http://localhost:8080/MechDesign/index.php\n\nSave once you customized your mech\n```\n\n## Authors\n\n[@NateThurmond](https://github.com/NateThurmond)\n\n## Version History\n\n-   0.3\n    -   Final iteration includes docker options for self-launch\n    -   Includes init DB scripts so anyone can spin up application\n-   0.2\n    -   Various bug fixes and optimizations (improved JS event handlers)\n    -   See [commit change]() or See [release history]()\n-   0.1\n    -   Initial Release\n\n## License\n\nThis project is licensed under the Apache License, Version 2.0\n\n## Acknowledgments\n\nInspiration, code snippets, etc.\n\n-   [Camo Specs](https://camospecs.com/)\n-   [Solaris Skunk Werks](https://solarisskunkwerks.com/)\n-   [BattleTech](https://www.battletech.com/)\n",
    "repoDemoGifRelative": "vids/demoUse.min.gif",
    "repoDemoGifAbsolute": "https://raw.githubusercontent.com/NateThurmond/MechDesign-php/master/vids/demoUse.min.gif"
  },
  {
    "name": "MechMarkup",
    "description": "MechMarkup is a website that include mech sheets for the board game battletech. It allows views of multiple mechs and markup on the pdfs to keep track of mechs and their stats while playing BattleTech.",
    "url": "https://github.com/NateThurmond/MechMarkup",
    "stars": 0,
    "forks": 0,
    "language": "JavaScript",
    "languages": {
      "JavaScript": 48.21,
      "PHP": 41.07,
      "CSS": 10.12,
      "Dockerfile": 0.61
    },
    "defaultBranch": "master",
    "readme": "# MechMarkup\n\nThis site utilizes Mongo databases and session tracking to implement a mobile friendly site/application that is used to \"Markup\" BattleTech Mech Record sheets. I wanted a better way to manage the multiple record sheets I was using for BattleTech and this method seemed like a natural fit.\n\n# Overview\n\nI've developed other sites that allow customization of BattleMechs but this application is more centered towards management of those mechs once you hit the tabletop. It includes options for maintaining record sheets in the same view, zoom capability for different sections of the record sheet, and different markup options to make it easier to manage these while playing.\n\n## Getting Started\n\n<img src=\"assets/videos/demoUse.min.gif\" width=\"450\" />\n\n### Dependencies\n\n-   Docker Desktop\n\n### Installing\n\n-   cp .env.example .env (modify as needed)\n-   docker compose down -v\n-   docker compose build --no-cache\n-   docker compose up -d\n\n### Executing program\n\n-   Navigate to your local browser\n-   Step-by-step guide below\n\n```\nNavigate to http://localhost:8090/\n\nData will be saved automatically as you make changes\n```\n\n## Authors\n\n[@NateThurmond](https://github.com/NateThurmond)\n\n## Version History\n\n-   0.4\n    -   Docker migration for ease of use\n-   0.3\n    -   Allow upload of custom record sheets and export of marked up sheets\n    -   Add vehicle and elemental record sheets\n-   0.2\n    -   Added auto-save capability for markup changes\n    -   See [commit change]() or See [release history]()\n-   0.1\n    -   Initial Development\n\n## License\n\nThis project is licensed under the Apache License, Version 2.0\n\n## Acknowledgments\n\nInspiration, code snippets, etc.\n\n-   [Camo Specs](https://camospecs.com/)\n-   [Solaris Skunk Werks](https://solarisskunkwerks.com/)\n-   [BattleTech](https://www.battletech.com/)\n",
    "repoDemoGifRelative": "assets/videos/demoUse.min.gif",
    "repoDemoGifAbsolute": "https://raw.githubusercontent.com/NateThurmond/MechMarkup/master/assets/videos/demoUse.min.gif"
  },
  {
    "name": "RemoteView",
    "description": "No description available.",
    "url": "https://github.com/NateThurmond/RemoteView",
    "stars": 0,
    "forks": 0,
    "language": "JavaScript",
    "languages": {
      "JavaScript": 96.02,
      "CSS": 1.44,
      "HTML": 1.42,
      "Dockerfile": 1.12
    },
    "defaultBranch": "master",
    "readme": "# Remote View\n\nThis project is a **remote web sharing application** utilizing **DOM diffing technology**, similar to what is found in React Native. It traverses the DOM tree to detect differences over time and transmits them via **WebSockets** to be rendered within the Remote View service application.\n\n- The **server folder** contains the application needed to service support requests.\n- The **client folder** contains the build script for the support service library JavaScript file that can be included in other websites.\n\n## Demo Video\n<img src=\"assets/videos/remoteViewDemoVid.min.gif\" width=\"850\" />\n\n---\n\n## Getting Started\n\n### Prerequisites\nEnsure you have the following installed:\n- **Docker Desktop** (or equivalent for your system)\n- **Node.js & npm** (if running locally without Docker)\n\n---\n\n### Installation & Setup\n\n#### 1. Clone the Repository\n```sh\ngit clone https://github.com/NateThurmond/remoteView.git\ncd remoteView\n```\n\n#### 2. Set Up Environment Variables\nCopy the `.env.example` file and modify it as needed:\n```sh\ncp .env.example .env\n```\n\n#### 3. Build & Run the Application\nTo start the application using Docker:\n```sh\ndocker-compose up --build -d\n```\n\nTo shut down and clean up:\n```sh\ndocker-compose down --rmi all --volumes --remove-orphans\ndocker system prune -a --volumes --force\n```\n\n---\n\n## Development Workflow\n\n### Running the Client Build\nIf you only need to rebuild the **client-side code**:\n```sh\ndocker-compose run --rm client-builder npm run build\n```\n\n### Restarting the Server Without Rebuilding the Client\n```sh\ndocker-compose up server --build\n```\n\n### Available npm Commands\nYou can also use the npm scripts from `package.json`:\n\n| Command | Description |\n|---------|-------------|\n| `npm run dockerClean` | Remove all Docker images, volumes, and containers |\n| `npm run dockerUpFresh` | Build and start everything from scratch |\n| `npm run clientBuild` | Rebuild the client-side code |\n| `npm run serverUp` | Start the server without rebuilding |\n| `npm run serverDown` | Stop the server |\n| `npm run serverBuild` | Rebuild and restart the server |\n\n---\n\n## Version History\n\n- **0.2**\n  - Consolidated Client/Server repositories\n  - Modernized and containerized the application\n- **0.1**\n  - Initial Development, Demoable\n\n---\n\n## License\n\nThis project is licensed under the **Apache License, Version 2.0**.\n\n## Authors\n\n[@NateThurmond](https://github.com/NateThurmond)\n",
    "repoDemoGifRelative": "assets/videos/remoteViewDemoVid.min.gif",
    "repoDemoGifAbsolute": "https://raw.githubusercontent.com/NateThurmond/RemoteView/master/assets/videos/remoteViewDemoVid.min.gif"
  },
  {
    "name": "EnphasePyGraph",
    "description": "Query local Enphase Controller for data even when remote is unavailable",
    "url": "https://github.com/NateThurmond/EnphasePyGraph",
    "stars": 0,
    "forks": 0,
    "language": "Python",
    "languages": {
      "Python": 96.43,
      "Dockerfile": 3.57
    },
    "defaultBranch": "main",
    "readme": "# Enphase Python Graph\n\nQueries local Enphase IQ Gateway API data to build out metrics for graph data\n\n## Description\n\nThe Enphase App (and site) rely on data uploaded from your local Enphase IQ Gateway into the cloud. I often notice significant delays in reporting within the app resulting directly from this data not being uploaded. I wanted a way to report on live data direct from my system w/o having the extra dependencies of live internet connection or enphase application service outages.\n\n<img src=\"assets/images/enphasePyApp.png\" width=\"80%\" />\n\n### Dependencies\n\n-   Python3\n-   Local Enphase IQ Gateway\n-   pyenv (optional, for managing Python versions and virtual environments)\n\n### Setup\n\n1. **Install pyenv and pyenv-virtualenv** (if not already installed):\n   Follow the instructions from the [pyenv](https://github.com/pyenv/pyenv#installation) and [pyenv-virtualenv](https://github.com/pyenv/pyenv-virtualenv#installation) repositories to install these tools.\n\n2. **Clone the repository**:\n    ```sh\n    git clone https://github.com/yourusername/pyEnphaseGraph.git\n    cd pyEnphaseGraph\n    ```\n3. **Set up the virtual environment**:\n    ```sh\n    pyenv install 3.10.0  # Install Python 3.10.0 if not already installed\n    pyenv virtualenv 3.10.0 pyEnChart  # Create a virtual environment named 'pyEnChart'\n    pyenv activate pyEnChart  # Activate the virtual environment\n    ```\n4. **Install the dependencies**:\n    ```sh\n    pip install -r requirements.txt  # Install the required packages\n    ```\n5. **Create a .env file with the necessary environment variables**:  \n    E.G.  \n   ENPHASE_IQ_GATEWAY_IP=http://your-enphase-iq-gateway-ip\n6. **Run the script:**\n    ```\n    python queryEnphaseGateway.py\n    ```\n7. **OR set up as a service**:\n\n    1. **Create the service file (and mod as needed)**:\n\n        ```sh\n        sudo cp pyEnphaseGraph.service /etc/systemd/system/\n        ```\n\n    2. **Reload the systemd daemon to recognize the new service**:\n\n        ```sh\n        sudo systemctl daemon-reload\n        ```\n\n    3. **Enable the service to start on boot**:\n\n        ```sh\n        sudo systemctl enable pyEnphaseGraph.service\n        ```\n\n    4. **Start the service**:\n\n        ```sh\n        sudo systemctl start pyEnphaseGraph.service\n        ```\n\n    5. **Check the status of the service**:\n        ```sh\n        sudo systemctl status pyEnphaseGraph.service\n        ```\n\nInspiration, code snippets, etc.\n\n-   [Enphase local IQ Gateway API Documentation](https://enphase.com/download/accessing-iq-gateway-local-apis-or-local-ui-token-based-authentication?srsltid=AfmBOoomOm3FlVi2W7OwHoV-aJ-OdVSL5kJrt5HmSgAqJBBv4qaDluRW)\n-   [Enphase IVP PDM Route troubleshooting](https://support.enphase.com/s/question/0D53m00009Ph9G0CAJ/why-am-i-still-unable-to-pull-daily-weekly-and-lifetime-production-data-from-local-api-with-homeowner-token)\n",
    "repoDemoGifRelative": "assets/images/enphasePyApp.png",
    "repoDemoGifAbsolute": "https://raw.githubusercontent.com/NateThurmond/EnphasePyGraph/main/assets/images/enphasePyApp.png"
  }
]